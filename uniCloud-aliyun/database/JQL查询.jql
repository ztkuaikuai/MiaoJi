// 本文件用于，使用JQL语法操作项目关联的uniCloud空间的数据库，方便开发调试和远程数据库管理
// 编写clientDB的js API（也支持常规js语法，比如var），可以对云数据库进行增删改查操作。不支持uniCloud-db组件写法
// 可以全部运行，也可以选中部分代码运行。点击工具栏上的运行按钮或者按下【F5】键运行代码
// 如果文档中存在多条JQL语句，只有最后一条语句生效
// 如果混写了普通js，最后一条语句需是数据库操作语句
// 此处代码运行不受DB Schema的权限控制，移植代码到实际业务中注意在schema中配好permission
// 不支持clientDB的action
// 数据库查询有最大返回条数限制，详见：https://uniapp.dcloud.net.cn/uniCloud/cf-database.html#limit
// 详细JQL语法，请参考：https://uniapp.dcloud.net.cn/uniCloud/jql.html

// 下面示例查询uni-id-users表的所有数据
db.collection("mj-user-bills").remove()
db.collection("mj-user-assets").remove()
db.collection('uni-id-users').remove()


// 32天时间戳  筛选条件 bill_date 日期格式化成 2023-09 的字段，按照账单类型进行分组，并计算每个分组的总价
db.collection("mj-user-bills").where('dateToString(add(new Date(0),bill_date),"%Y-%m","+0800") == "2023-09"').groupBy(
	'bill_type').groupField('sum(bill_amount) as bill_amount_total').orderBy('bill_type asc').get()

// 按日进行分组 
const day1 = db.collection("mj-user-bills").where(
	'bill_date > (new Date().getTime() - 86400000) && dateToString(add(new Date(0),bill_date),"%Y-%m-%d","+0800") == "2023-09-08"'
).getTemp()
const day2 = db.collection("mj-user-bills").where(
	'bill_date > (new Date().getTime() - 172800000) && dateToString(add(new Date(0),bill_date),"%Y-%m-%d","+0800") == "2023-09-07"'
).getTemp()
const day3 = db.collection("mj-user-bills").where(
	'bill_date > (new Date().getTime() - 259200000) && dateToString(add(new Date(0),bill_date),"%Y-%m-%d","+0800") == "2023-09-06"'
).getTemp()

db.multiSend(day1, day2, day3)

const userMonthBills = db.collection("mj-user-bills").where(
	`dateToString(add(new Date(0),bill_date),"%Y-%m","+0800") == "2023-09"`).getTemp()
const userAssets = db.collection("mj-user-assets").field('_id,asset_type,user_id').getTemp()
db.collection(userMonthBills, userAssets).get()

